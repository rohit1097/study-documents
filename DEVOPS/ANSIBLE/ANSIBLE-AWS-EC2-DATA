


LINK:

https://docs.ansible.com/ansible/latest/roadmap/ROADMAP_2_9.html





-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAqyDRyZfqtTbGtsotdAhJmCCZd54vkMDOsf17JLUH3Q/enGeX\nUuyp6AJdm930V+WXg9Jf5tjZ8jfOn8i7+opQ3a1zO3EkeJ4dpaJw+m7FgoAsIMqs\nIrImtVcDd1gAWkyUMYHw/3da8g/9ck8RP8KPo1x88urQ7l7ZYYjXrCmrhSHWqAiy\nYWJYcHYzAAE44rD2zOyG3a6OKWtKDHleCO2UatwfozUlcS8PGUvj3QnFVeKh+wJW\nJmGx5TN2ttB3pzw8RK/vJvdGYnVgBG7wNFFQaxuC9F7IY5FNsx2EKbvFqPySNYGH\n7FBtA4F1/S5YoSCZO9EQpiyXMUZ0vjiUipYs2QIDAQABAoIBAEit5auS49IW84qK\nj4dqRadgoQ1Wl6kI2kBqAbTzVeWjac5PiMtlTDwHVS5vs+joz9LitGxcySPAY/ck\n0AF2YSXlFr22LeE0di70sLsL9MKaISPEMBuEQkBeNlCnhW7Ue1QTdgFp9aw88k1s\nG01TGqItE7wv0pCKpBRyg/bQs9IUfUPN4utsYmUKtBUYr4Kjh6bKV/TzlXsqFh0e\n5HVJSW585pbfKni6Wnq8qLy1GJnJ6CabP90+w5N7uFf//mLMSACAzsqO86SvNjrD\nAGu2Qdtq5pvnOSg0uQ89skx+T/xPF/LA8KFosoqnPQvrroWPzkDlhtaPp8MjB7S4\nF6GQqSECgYEA03g7EohSnZHGSt3jPYey6v9KBT+wnCBBoxKp4d2tpxRpP8OsEHad\ny78LOrrosKEZzYz6llvqEoGvp5NFxrMkdInc1c3KHkpsFgTqNh6u+YltdcVshoUU\n4OPEgMz3CJ1VLbfIzyYRFpBjLBwrq7zV1K7/Cq/43nOHSC5Y47jeoS0CgYEAzynj\nTiBURUJNmEPYl1lrU6Z47WFUi0aWOY15dOIKdx3YT8603hb60c9ckgRUy4FZGbyQ\nJF5yicETv/KEP9+hu82BmSk5PXjSWpcnU2X567wqferjIIZNeE6YhB+/WCmzdQeG\n6hZrAeBioL8s/2Y2GAAtD7qBqEVFqzsOr6Ukzd0CgYB4rexILzO2aDJZFzdPLdmU\n8gsz45zN/Dp47XW1R+SJrMRDd08CNi7mzyeBZJjV85neC84VcG6sEQZFA26WbjUn\nrGUyPjZSAvabukJOkEQac6rbwsakHd5EWLcTKeTwLZkmdfNLA9ZMoil2Sr1BTIpa\nzWMOnk3P5O4W6xwfGKk0IQKBgD59ezSg6equcmug45/b+FUWXVn1xyPwGfaoZ1/L\no66E0TBZwRNRST2q2Fivd8ifbvoleDGQT+qf1E5NYHlIAyh8eEB0P/D8Fi//cnxk\nwXvLmeG7zeGMwaetxbHtRbHZemmt6JOKSaMaRYYJxRARi/W3b+BTuTLCGp7pRKfV\nIAH9AoGAIT0NojmALrdGDf16hHum98z24ljehoPKVN6p9aV/6hUu+N7R+aACWSut\niGU++v3asYd30FjVJmq0H2IfofLR0NR4Ka7eiqA4lCKKTDtXjs0IyFFJbSI7iIND\nZC+q/W9ZSmdO5p0+qcJ3q9GcRaLW9Lw9J1cEE5KvNSuEyC6tWUM=\n-----END RSA PRIVATE KEY-----





********************************************************************************************************************************************

---
#vars/main.yml

aws_access_key: "AKIATUYNDRINDM42YMXM"
aws_secret_key: "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"
region: "us-east-1"

# VPC
vpc_cidr: 10.10.0.0/16
vpc_name: "Ansible VPC-EC2"

# Subnet
public_subnet_name: "Ansible Public Subnet"
private_subnet_name: "Ansible Private Subnet"
public_subnet_cidr: 10.10.1.0/24
private_subnet_cidr: 10.10.2.0/24

# Internet Gateway Name
igw_name: "Traffic IGW"

# Nat Gateway Name
nat_get_name: "Ansible NGW"


# Internet Getway Route Name
public_route_name: "Ansible public RT"
private_route_name: "Ansible private RT"


securitygroup_name: "Ansible Security Group"

ec2_tag: "WebServer"

ec2_public_name: "ansible-public-1"
ec2_private_name: "ansible-private-1"


#The local path to which we would save our EC2 Private Key
ec2_key_directory: "/home/ubuntu"
keypair: "ec2_key_pair"








*************************************************************************************************************************************************************************


---

 - name: create VPC
   ec2_vpc_net:
     name: "{{ vpc_name }}"
     cidr_block: "{{ vpc_cidr }}"
     region: "{{ region }}"
     state: present
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
   register: vpc


 - name: Set VPC ID in variable
   set_fact:
     vpc_id: "{{ vpc.vpc.id }}"


 - name: associate public subnet to the VPC
   ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ public_subnet_cidr }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    map_public: yes
    resource_tags:
      Name: "{{ public_subnet_name }}"
   register: result_public_subnet

 - name: associate private subnet to the VPC
   ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ private_subnet_cidr }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    map_public: no
    resource_tags:
      Name: "{{ private_subnet_name }}"
   register: result_private_subnet


 - name: create IGW
   ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
    tags:
      Name: "{{ igw_name }}"
   register: result_igw
   

 - name: Create new nat gateway and allocate new EIP.
   ec2_vpc_nat_gateway:
     state: present
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
     subnet_id: "{{ result_public_subnet.subnet.id }}"
     wait: true
     if_exist_do_not_create: true
     release_eip:            true
     region: "{{ region }}"
   register: new_nat_gateway



 - name: Set up public subnet route table
   ec2_vpc_route_table:
     vpc_id: "{{ vpc_id }}"
     region: "{{ region }}"
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
     tags:
       Name: "{{ public_route_name }}"
     subnets:
       - "{{ result_public_subnet.subnet.id }}"
     routes:
       - dest: 0.0.0.0/0
         gateway_id: "{{ result_igw.gateway_id }}"
   register: result_public_route


 - name: Set up NAT-protected route table
   ec2_vpc_route_table:
     vpc_id: "{{ vpc_id }}"
     region: "{{ region }}"
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
     tags:
       Name: "{{ private_route_name }}"
     subnets:
       - "{{ result_private_subnet.subnet.id }}"
     routes:
       - dest: 0.0.0.0/0 
         gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
   register: nat_route_table

 
 - name: Create Security Group
   ec2_group:
     name: Ansible SG
     description: Ansible aws-vpc Security Group
     vpc_id: "{{ vpc_id }}"
     region: "{{ region }}"
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
     rules:
       - proto: tcp
         ports:
         - 80
         cidr_ip: 0.0.0.0/0
       - proto: tcp
         ports:
         - 22
         cidr_ip: 0.0.0.0/0
     tags:
       Name: "{{ securitygroup_name }}"
   register: security_group




 - name: create a new ec2 key pair, returns generated private key
   ec2_key:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ keypair }}"
    region: "{{ region }}"
   register: keypair
   tags:
    - ec2_key

 - debug:
      var: keypair
   tags:
    - ec2_key

 - name: Copy EC2 Key Pair private key locally
   copy: content= "{{ keypair.key.private_key }}" dest={{ ec2_key_directory }}key.ppk
   when: keypair.changed == true
   tags:
    - ec2_key


 


 - name: Create EC2 Instance
   ec2:
    image: ami-467ca739
    wait: yes
    instance_type: t2.micro
    region: "{{ region }}"
    group_id: "{{ security_group.group_id }}"
    vpc_subnet_id: "{{ result_public_subnet.subnet.id }}"
    key_name: "{{ keypair.key.name }}"
    count_tag: "{{ ec2_tag }}"
    exact_count: 1
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"






 - name: Create EC2 Instance
   ec2:
    image: ami-467ca739
    wait: yes
    instance_type: t2.micro
    region: "{{ region }}"
    group_id: "{{ security_group.group_id }}"
    vpc_subnet_id: "{{ result_private_subnet.subnet.id }}"
    key_name: "{{ keypair.key.name  }}"
    count_tag: "{{ ec2_tag }}"
    exact_count: 1
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"


*********************************************************************************************************************************************************


Tempararryy study

 - name: Create EC2 Instance
   ec2:
     image: ami-467ca739
     wait: yes
     instance_type: t2.micro
     region: "{{ region }}"
     group_id: "{{ security_group.group_id }}"
     vpc_subnet_id: "{{ result_public_subnet.subnet.id }}"
     key_name: "{{ keypair_name.key.name }}"
     #     count_tag: "{{ ec2_tag }}"
     exact_count: 1
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
     tags:
       Name: "{{ ec2_public_name }}"
     assign_public_ip: yes



 - name: Create EC2 Instance
   ec2:
     image: ami-467ca739
     wait: yes
     instance_type: t2.micro
     region: "{{ region }}"
     group_id: "{{ security_group.group_id }}"
     vpc_subnet_id: "{{ result_private_subnet.subnet.id }}"
     key_name: "{{ keypair_name.key.name }}"
     #   count_tag: "{{ ec2_tag }}"
     exact_count: 1
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
     tags:
       Name: "{{ ec2_private_name }}"


